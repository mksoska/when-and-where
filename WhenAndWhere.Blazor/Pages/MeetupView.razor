@page "/meetups/{meetupId:int}/view"
@attribute [Authorize]
@attribute [Authorize(Policy = "MeetupView")]

@using WhenAndWhere.BL.Services
@using Microsoft.AspNetCore.Components
@using WhenAndWhere.BL.DTOs

@inject MeetupService MeetupService
@inject UserMeetupService UserMeetupService
@inject OptionService OptionService
@inject UserService UserService
@inject UserOptionService UserOptionService
@inject NavigationManager NavigationManager

<StyledRow Inner="false">
    <ValidationPopup IsActive="@popup.Item1" ErrorMessage="@popup.Item2" OnClose="() => popup = (false, string.Empty)" />
</StyledRow>

<div class="row justify-content-between my-2 p-1 bg-dark rounded">
    <input type="button" class="col-3 col-md-2 col-lg-1 btn btn-secondary" value="< Back" @onclick="@(() => NavigationManager.NavigateTo("/meetups"))" />
    <input type="button" class="col-4 col-md-3 col-lg-2 btn btn-danger" value="Leave meetup" @onclick="LeaveMeetup" />
</div>

<hr />

<StyledRow Inner="false">
    <h2>Title</h2>
</StyledRow>

<StyledRow Inner="true">
    @meetup.Name
</StyledRow>

<hr />

<StyledRow Inner="false">
    <h2>Description</h2>
</StyledRow>

<StyledRow Inner="true">
    @meetup.Description
</StyledRow>

<hr />

<StyledRow Inner="false">
    <h2>Participants</h2>
</StyledRow>

<AuthorizeView Policy="ManageParticipants">
    <Authorized>
        <div class="list-group row justify-content-center">
            @foreach (var userMeetup in MeetupService.GetInvitedUsers(meetup.Id).Result)
            {
                <a @onclick="() => KickParticipant(userMeetup.UserId)" class="list-group-item col-sm-12 col-md-6 col-lg-4">@UserService.GetById(userMeetup.UserId).Result.UserName</a>
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <ul class="list-group row justify-content-center">
            @foreach (var userMeetup in MeetupService.GetInvitedUsers(meetup.Id).Result)
            {
                <li class="list-group-item col-sm-12 col-md-6 col-lg-4">@UserService.GetById(userMeetup.UserId).Result.UserName</li>
            }
        </ul>
    </NotAuthorized>
</AuthorizeView>

<hr />

<StyledRow Inner="false">
    <h2>Options</h2>
</StyledRow>

<StyledRow Inner="false">
    <p>
        <button class="btn btn-secondary" type="button" data-toggle="collapse" data-target="#collapseForm" aria-expanded="false" aria-controls="collapseForm">
            +
        </button>
    </p>
    <div class="collapse col-12 my-2" id="collapseForm">
        <div class="card card-body">
            <EditForm Model="newOption" OnSubmit="CreateOption">
                <DataAnnotationsValidator />
                <ValidationSummary></ValidationSummary>

                <div class="input-group">
                    <InputText class="form-control" @bind-Value="newOption.Label" placeholder="Label" />
                    <InputDate class="form-control" @bind-Value="newOption.Start" />
                    <InputDate class="form-control" @bind-Value="newOption.End" />
                    
                    <InputText class="form-control" @bind-Value="newOption.State" placeholder="State" />
                    <InputText class="form-control" @bind-Value="newOption.City" placeholder="City" />
                    <InputText class="form-control" @bind-Value="newOption.ZipCode" placeholder="Zip code" />
                    <InputText class="form-control" @bind-Value="newOption.Street" placeholder="Street" />
                    <InputText class="form-control" @bind-Value="newOption.Number" placeholder="Number" />

                    <div class="input-group-append">
                        <input type="submit" class="btn btn-primary" value="Add" />
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</StyledRow>

<div class="row">
    @foreach (var option in MeetupService.GetOptions(meetup.Id).Result)
    {
        <div class="list-group col-9 col-md-8">
            <a class="list-group-item list-group-item-action @IsActiveItem(option) d-flex justify-content-between align-items-center" @onclick="() => ToggleOptionVote(option)">
                @option.Label | @option.Start - @option.End
                <span class="badge badge-primary badge-pill">@OptionService.GetVoters(option.Id).Result.Count</span>
            </a>
        </div>
        <div class="list-group list-group-flush col-3 col-md-2 text-center">
            if (IsOptionOwner(option))
            {
                <a class="list-group-item list-group-item-danger list-group-item-action" @onclick="() => DeleteOption(option)">
                    <span>Remove</span>
                </a>
            }
            else
            {
                <a class="list-group-item list-group-item bg-transparent">
                    <span>&zwnj;</span>
                </a>
            }
        </div>
    }
</div>


<div class="container-bottom bg-dark"></div>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    
    [Parameter]
    public int MeetupId { get; set; }

    private MeetupDTO meetup;

    private UserDTO signedUser;
    
    private OptionDTO newOption = new();

    private (bool, string) popup;
    
    protected override async Task OnParametersSetAsync()
    {
        meetup = await MeetupService.GetById(MeetupId);
        signedUser = UserService.GetByName((await authenticationStateTask).User.Identity?.Name);
    }

    private async Task LeaveMeetup()
    {
        await UserMeetupService.Delete(signedUser.Id, MeetupId);
        NavigationManager.NavigateTo($"/meetups");
    }

    private async Task KickParticipant(int userId)
    {
        await UserMeetupService.Delete(userId, MeetupId);
        StateHasChanged();
    }

    private async Task ToggleOptionVote(OptionDTO option)
    {
        var userOption = await UserOptionService.GetById(signedUser.Id, option.Id);
        if (userOption == null)
        {
            var newUserOption = new UserOptionDTO { UserId = signedUser.Id, OptionId = option.Id, TimeVoted = DateTime.Now };
            await UserOptionService.Create(newUserOption);
        }
        else
        {
            await UserOptionService.Delete(userOption);
        }
        StateHasChanged();
    }

    private async Task CreateOption()
    {
        newOption.OwnerId = signedUser.Id;
        newOption.MeetupId = MeetupId;

        await OptionService.Create(newOption);
        StateHasChanged();
    }

    private async Task DeleteOption(OptionDTO option)
    {
        await OptionService.Delete(option.Id);
        StateHasChanged();
    }

    private bool IsOptionOwner(OptionDTO option)
    {
        return signedUser.Id == option.OwnerId;
    }

    private async Task<string> IsActiveItem(OptionDTO option)
    {
        return UserOptionService.GetById(signedUser.Id, option.Id).Result != null ? "active" : string.Empty;
    }
}
