@page "/meetings/{meetingId:int}/view"

@using WhenAndWhere.Data
@using static WhenAndWhere.Data.StaticService  

@inject MeetingService MeetingService
@inject VoteService VoteService
@inject ApplicationUserService UserService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject UpdatePageService UpdatePageService

@implements IDisposable

<StyledRow Inner="false">
    <ValidationPopup IsActive="dataPopup.Item1" ErrorMessage="@dataPopup.Item2" OnClose="() => dataPopup = (false, null)" />
</StyledRow>

<div class="row justify-content-between my-2 p-1 bg-dark rounded">
    <input type="button" class="col-3 col-md-2 col-lg-1 btn btn-secondary" value="< Back" @onclick="@(() => NavigationManager.NavigateTo("/meetings"))" />
    @if (IsParticipant())
    {
        <input type="button" class="col-4 col-md-3 col-lg-2 btn btn-danger" value="Leave meeting" @onclick="LeaveMeeting" />
    }
    else
    {
        <input type="button" class="col-3 col-md-2 col-lg-1 btn btn-secondary" value="Home" @onclick="@(() => NavigationManager.NavigateTo("/"))" />
    }
</div>

<StyledRow Inner="false">
    <h2>Meeting ID</h2>
</StyledRow>

<StyledRow Inner="false">
    <h4 class="col-6 text-center">
        @MeetingId
        <button class="mx-3 btn btn-secondary" @onclick="() => CopyToClipboard(meeting.Id.ToString())">Copy</button>
    </h4>
</StyledRow>

<hr />

@if (IsParticipant())
{
    @if (currentUserMeeting.UserApproved)
    {
        <StyledRow Inner="false">
            <h2>Title</h2>
        </StyledRow>

        <StyledRow Inner="true">
            @meeting.Title
        </StyledRow>

        <hr />

        <StyledRow Inner="false">
            <h2>Description</h2>
        </StyledRow>

        <StyledRow Inner="true">
            @meeting.Description
        </StyledRow>

        <hr />

        <StyledRow Inner="false">
            <h2>Participants</h2>
        </StyledRow>

        <ul class="list-group row justify-content-center">
            @foreach (var userMeeting in meeting.UserMeetings.Where(um => um.UserApproved))
            {
                <li class="list-group-item col-sm-12 col-md-6 col-lg-4">@userMeeting.User.UserName</li>
            }
        </ul>

        <hr />

        @if (meeting.Private && IsOwner())
        {
            <StyledRow Inner="false">
                <h2>Waiting</h2>
            </StyledRow>

            <div class="list-group row justify-content-center">
                @foreach (var userMeeting in meeting.UserMeetings.Where(um => !um.UserApproved))
                {
                    <a @onclick="() => ApproveUser(userMeeting)" class="list-group-item col-sm-12 col-md-6 col-lg-4">@userMeeting.User.UserName</a>
                }
            </div>

            <hr />
        }

        <StyledRow Inner="false">
            <h2>Votes</h2>
        </StyledRow>

        <StyledRow Inner="false">
            <p>
                <button class="btn btn-secondary" type="button" data-toggle="collapse" data-target="#collapseForm" aria-expanded="false" aria-controls="collapseForm">
                    +
                </button>
            </p>
            <div class="collapse col-12 my-2" id="collapseForm">
                <div class="card card-body">
                    <EditForm Model="newVote" OnSubmit="AddVote">
                        <DataAnnotationsValidator />
                        <ValidationSummary></ValidationSummary>

                        <div class="input-group">
                            <InputDate class="form-control" @bind-Value="newVote.Time" />
                            <InputText class="form-control" @bind-Value="newVote.Place" placeholder="place" />

                            <div class="input-group-append">
                                <input type="submit" class="btn btn-primary" value="Add" />
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </StyledRow>

        <div class="row">
            <div class="list-group col-9 col-md-8">
                @foreach (var vote in meeting.Votes)
                {
                    <a class="list-group-item list-group-item-action @IsActiveItem(vote) d-flex justify-content-between align-items-center" @onclick="() => ToggleVoteParticipant(vote)">
                        @vote.Time | @vote.Place
                        <span class="badge badge-primary badge-pill">@vote.Participants.Count</span>
                    </a>
                }
            </div>
            <div class="list-group list-group-flush col-3 col-md-2 text-center">
                @foreach (var vote in meeting.Votes)
                {
                    @if (vote.Owner == UserService.CurrentUser)
                    {
                        <a class="list-group-item list-group-item-danger list-group-item-action" @onclick="() => RemoveVote(vote)">
                            <span>Remove</span>
                        </a>
                    }
                    else
                    {
                        <a class="list-group-item list-group-item bg-transparent">
                            <span>&zwnj;</span>
                        </a>
                    }
                }
            </div>
        </div>


        <div class="container-bottom bg-dark">

        </div>
    }
    else
    {
        <div class="text-center">
            <h4>Wait until the host gives you the approval for join.</h4>
        </div>
    }
}
else
{
    <div class="row chase-row">
        <Chase Center="true" Size="70px" Color="gray" />
    </div>    
}


@code {
    [Parameter]
    public int MeetingId { get; set; }

    private Meeting meeting;

    private UserMeeting currentUserMeeting;

    private Vote newVote;

    private (bool, string) dataPopup;
    private Action<string> showPopup;

    protected override void OnInitialized()
    {
        showPopup = err => dataPopup = (true, err);
        newVote = new Vote();
        UpdatePageService.UpdatePage += OnUpdatePage;
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadMeeting();
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        UpdatePageService.UpdatePage -= OnUpdatePage;
    }

    public void OnUpdatePage()
    {
        // somehow reload vote based in VoteId stored in UpdatePageService       
        InvokeAsync(this.StateHasChanged);
    }

    private async Task LoadMeeting()
    {
        if (!await IsSuccess(UserService.CheckUserCurrentAsync(), showPopup))
        {
            return;
        }
        meeting = await MeetingService.GetMeetingAsync(MeetingId);
        if (meeting is null)
        {
            showPopup("This meeting is not accessible at the moment!");
            return;
        }
        currentUserMeeting = await MeetingService.GetUserMeetingAsync(meeting, UserService.CurrentUser);
        if (currentUserMeeting is null)
        {
            showPopup("To access this meeting, you have to join it first!");
            return;
        }
        await ApproveCurrentUser();
    }

    private async Task LeaveMeeting()
    {
        if (await IsSuccess(MeetingService.RemoveParticipantAsync(currentUserMeeting), showPopup))
        {
            NavigationManager.NavigateTo("/meetings");
        }
    }

    private async Task ToggleVoteParticipant(Vote vote)
    {
        var userVote = await VoteService.GetUserVoteAsync(vote, UserService.CurrentUser);

        if (userVote is null)
        {
            await IsSuccess(VoteService.AddParticipantAsync(vote, UserService.CurrentUser), showPopup);
        }
        else
        {
            await IsSuccess(VoteService.RemoveParticipantAsync(userVote), showPopup);
        }
        UpdatePageService.CallUpdatePage(vote);
    }

    private async Task AddVote()
    {
        newVote.Owner = UserService.CurrentUser;
        newVote.Meeting = meeting;

        if (await IsSuccess(VoteService.AddVoteAsync(newVote), showPopup))
        {
            UpdatePageService.CallUpdatePage(newVote);
        }
    }

    private async Task RemoveVote(Vote vote)
    {
        if (await IsSuccess(VoteService.RemoveVoteAsync(vote), showPopup))
        {
            UpdatePageService.CallUpdatePage(vote);
        }
    }

    private async Task CopyToClipboard(string text)
    {
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    private async Task ApproveUser(UserMeeting userMeeting)
    {
        await IsSuccess(MeetingService.ApproveParticipantAsync(userMeeting), showPopup);
    }

    private async Task ApproveCurrentUser()
    {
        if (!currentUserMeeting.UserApproved)
        {
            if (!meeting.Private || IsOwner())
            {
                await ApproveUser(currentUserMeeting);
            }
        }
    }

    private string IsActiveItem(Vote vote)
    {
        return vote.Participants.Contains(UserService.CurrentUser) ? "active" : string.Empty;
    }

    private bool IsOwner()
    {
        return meeting.Owner == UserService.CurrentUser;
    }

    private bool IsParticipant()
    {
        return currentUserMeeting is not null;
    }
}
