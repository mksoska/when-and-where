@page "/"

@using WhenAndWhere.BL.Services
@using WhenAndWhere.BL.DTOs
@using WhenAndWhere.BL.Facades

@inject MeetupService MeetupService
@inject UserService UserService
@inject WhenAndWhereFacade WhenAndWhereFacade
@inject NavigationManager NavigationManager


<AuthorizeView>
    <Authorized>
        <StyledRow Inner="false">
            <div class="row justify-content-between">
                <h1 class="col">My</h1>
                <input type="button" class="col-4 col-md-3 col-lg-2 btn btn-secondary rounded-pill" value="+ Create" @onclick="@(() => NavigationManager.NavigateTo("/meetups/create"))"/>
            </div>
           
            <h4>Meetups</h4>
        </StyledRow>

        <hr />
        
        <StyledRow Inner="true">
            <ValidationPopup IsActive="@popup.Item1" ErrorMessage="@popup.Item2" OnClose="() => popup = (false, string.Empty)" />
        </StyledRow>

        <form @onsubmit="SearchMeetups">
            <div class="form-row">
                <div class="col-sm-7 input-group my-4">
                    <input type="search" @bind="searchString" class="form-control" placeholder="Search" required />
                    <div class="input-group-append">
                        <button class="btn btn-primary" type="submit">
                            <img src="Images/search.svg" alt="Search" />
                        </button>
                    </div>
                </div>
            </div>
        </form>
        
        <div class="table-responsive rounded-table">
            <table class="table table-hover">
                <thead class="thead-dark">
                    <tr>
                        <th scope="col">Title</th>
                        <th scope="col">Created by</th>
                        <th scope="col">Time</th>
                        <th scope="col">Participants</th>
                        <th scope="col">Options</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var meetup in searchedMeetups
                    .OrderByDescending(um => um.DateInvited)
                    .Select(um => MeetupService.GetById(um.MeetupId).Result))
                {
                    //TODO: All service calls get executed on each render -> optimalize using variables in @code
                    <tr class="@IsActiveRow(meetup.Id)">
                        <th @onclick="e => NavigateToMeetup(meetup.Id)" scope="row">@meetup.Name</th>
                        <td @onclick="e => NavigateToMeetup(meetup.Id)">@UserService.GetById(meetup.OwnerId).Result.UserName</td>
                        <td @onclick="e => NavigateToMeetup(meetup.Id)">@meetup.OptionsFrom - @meetup.OptionsTo</td>
                        <td @onclick="e => NavigateToMeetup(meetup.Id)">@MeetupService.GetInvitedUsers(meetup.Id).Result.Count</td>
                        <td @onclick="e => NavigateToMeetup(meetup.Id)">@MeetupService.GetOptions(meetup.Id).Result.Count</td>
                    </tr>
                }
                </tbody>
                <tfoot>
                    <tr>
                        <th>Page</th>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="row upper-space">
            <img class="main-icon" src="/Images/chronometer.svg" alt="When"/>
            <img class="main-icon" src="/Images/meeting-point.svg" alt="Where"/>
            <img class="main-icon" src="/Images/question-mark.svg" alt="Question mark"/>
        </div>
    </NotAuthorized>
</AuthorizeView>



@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private UserDTO signedUser;
    
    private IEnumerable<UserMeetupDTO> myMeetups = new List<UserMeetupDTO>();

    private string searchString;

    private IEnumerable<UserMeetupDTO> searchedMeetups = new List<UserMeetupDTO>();

    private (bool, string) popup;
    
    protected override async Task OnParametersSetAsync()
    {
        signedUser = UserService.GetByName((await authenticationStateTask).User.Identity?.Name);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && authenticationStateTask.Result.User.Identity.IsAuthenticated)
        {
            myMeetups = await UserService.GetInvitedMeetups(signedUser!.Id);
            searchedMeetups = myMeetups;
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void SearchMeetups()
    {
        searchedMeetups = myMeetups
            .Select(um => new
            {
                um,
                meetup = MeetupService.GetById(um.MeetupId).Result!,
                owner = UserService.GetById(MeetupService.GetById(um.MeetupId).Result!.OwnerId).Result!
            })
            .Where(entry => entry.meetup.Name.Contains(searchString) || entry.owner.UserName.Contains(searchString))
            .Select(entry => entry.um);

        StateHasChanged();
    }

    private void NavigateToMeetup(int meetupId)
    {
        NavigationManager.NavigateTo($"/meetups/{meetupId}/view");
    }


    private async Task<string> IsActiveRow(int meetupId)
    {
        return await WhenAndWhereFacade.IsAnyOptionVoted(signedUser!.Id, meetupId) switch
        {
            true => "table-secondary",
            _ => "table-light"
        };
    }
}
