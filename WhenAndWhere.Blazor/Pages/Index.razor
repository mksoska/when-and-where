@page "/"

@using WhenAndWhere.BL.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ProtectedSessionStorage ProtectedSessionStore
@inject UserService UserService
@inject MeetupService MeetupService
@inject NavigationManager NavigationManager

<div class="row upper-space">
    <img class="main-icon" src="/Images/chronometer.svg" alt="When" />
    <img class="main-icon" src="/Images/meeting-point.svg" alt="Where" />
    <img class="main-icon" src="/Images/question-mark.svg" alt="Question mark" />
</div>

<div class="row">
    <h1>Join meeting</h1>
</div>

<ValidationPopup IsActive="dataPopup.Item1" ErrorMessage="@dataPopup.Item2" OnClose="() => dataPopup = (false, null)" />

<form @onsubmit="JoinMeeting">
    <div class="form-row">
        <div class="col-sm-7">
            <input type="number" class="form-control" min="1" step="1" @bind="MeetingId" placeholder="Meeting ID" required />
        </div>
    </div>
    <div class="row">
        <AuthorizeView>
            <Authorized Context="authContext">
                <input type="submit" class="form-control col-3 my-3 btn btn-secondary" value="Join">
            </Authorized>
            <NotAuthorized Context="authContext">
                <a href="Identity/Account/Login" class="col-3 my-3">                    
                    <input type="button" class="form-control btn btn-secondary" value="Join">
                </a>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</form>

@code {
    private int meetingId;
    public int? MeetingId
    {
        get
        {
            return meetingId != 0 ? meetingId : null;
        }
        set
        {
            meetingId = value.HasValue ? Math.Abs((int)value) : 0;
            ProtectedSessionStore.SetAsync("meetingId", meetingId);
        }
    }

    private (bool, string) dataPopup;
    private Action<string> showPopup;

    protected override void OnInitialized()
    {
        showPopup = err => dataPopup = (true, err);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await ProtectedSessionStore.GetAsync<int>("meetingId");

            if (result.Success)
            {
                meetingId = result.Value;
                StateHasChanged();
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task JoinMeeting()
    {
        if (!await IsSuccess(UserService.CheckUserCurrentAsync(), showPopup))
        {
            return;
        }

        var foundMeeting = await MeetupService.GetById(meetingId);
        if (foundMeeting is null)
        {
            showPopup("Meeting with this ID does not exist!");
            return;
        }

        if (!await IsSuccess(MeetingService.AddParticipantAsync(foundMeeting, UserService.CurrentUser), showPopup))
        {
            return;
        }

        NavigationManager.NavigateTo($"/meetings/{meetingId}/view");
    }
}

