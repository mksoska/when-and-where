@page "/meetups/{meetupId:int}/roles"

@attribute [Authorize(Policy = "ManageRoles")]

@using WhenAndWhere.BL.Services
@using WhenAndWhere.BL.DTOs
@using WhenAndWhere.BL.Facades
@using WhenAndWhere.Blazor.Authorization

@inject MeetupService MeetupService
@inject UserService UserService
@inject WhenAndWhereFacade WhenAndWhereFacade

<div class="row justify-content-between my-2 p-1 bg-dark rounded-pill">
    <a href="/meetups/@MeetupId/view" class="col-3 col-md-2 col-lg-1 btn btn-secondary rounded-pill" role="button">&#60; Back</a>
    <div></div>
</div>

<div class="table-responsive rounded-table">
    <table class="table table-hover">
        <thead class="thead-dark">
            <tr>
                <th scope="col">User</th>
                <th scope="col">Role</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in participants)
            {
                <tr>
                    <td>
                        @user.UserName @if (IsOwner(user)) { <strong>(owner)</strong> }
                    </td>
                    <td>
                        <select @onchange="(e) => ChangeRole(e, user)">
                            @foreach(var item in roleItems) {
                                @if (IsAssigned(user, item.Name).Result)
                                {
                                    <option title="@item.Name">@item.Name</option>
                                }
                                else
                                {
                                    <option selected title="@item.Name">@item.Name</option>
                                }
                            }
                        </select>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter]
    public int MeetupId { get; set; }

    private MeetupDTO meetup;
    
    public class DropdownItem
    {
        public string Name { get; set; }
    }
    
    List<DropdownItem> roleItems = new()
    {
        new DropdownItem { Name = Roles.Administrator },
        new DropdownItem { Name = Roles.Moderator },
        new DropdownItem { Name = Roles.User }
    };

    private IEnumerable<UserDTO> participants = new List<UserDTO>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            meetup = await MeetupService.GetById(MeetupId);
            participants = MeetupService.GetInvitedUsers(MeetupId).Result.Select(um => UserService.GetById(um.UserId).Result);
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task ChangeRole(ChangeEventArgs e, UserDTO user)
    {
        var roleName = e.Value!.ToString()!;
        if (roleName == Roles.User)
        {
            await WhenAndWhereFacade.DeleteUserRoles(user.Id, MeetupId);
        }
        else
        {
            await WhenAndWhereFacade.ChangeUserRole(user.Id, MeetupId, roleName);
        }
    }

    private bool IsOwner(UserDTO user)
    {
        return user.Id == meetup.OwnerId;
    }

    private async Task<bool> IsAssigned(UserDTO user, string roleName)
    {
        return await WhenAndWhereFacade.HasUserRole(user.Id, MeetupId, roleName) || roleName == Roles.User;
    }
}