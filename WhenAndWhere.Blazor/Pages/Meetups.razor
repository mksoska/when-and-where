@page "/meetups"
@attribute [Authorize]

@using WhenAndWhere.BL.Services
@using WhenAndWhere.BL.DTOs
@using Microsoft.AspNetCore.Authorization
@using WhenAndWhere.BL.Facades

@inject MeetupService MeetupService
@inject UserService UserService
@inject WhenAndWhereFacade WhenAndWhereFacade
@inject NavigationManager NavigationManager

<StyledRow Inner="false">
    <h1>My</h1>

    <h4>Meetups</h4>
</StyledRow>

<hr />

<StyledRow Inner="true">
    <ValidationPopup IsActive="@popup.Item1" ErrorMessage="@popup.Item2" OnClose="() => popup = (false, string.Empty)" />
</StyledRow>


<form @onsubmit="SearchMeetups">
    <div class="form-row">
        <div class="col-sm-7 input-group my-4">
            <input type="search" @bind="searchString" class="form-control" placeholder="Search" required />
            <div class="input-group-append">
                <button class="btn btn-primary" type="submit">
                    <img src="Images/search.svg" alt="Search" />
                </button>
            </div>
        </div>
    </div>
</form>

<div class="table-responsive">
    <table class="table table-hover">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Title</th>
                <th scope="col">Created by</th>
                <th scope="col">Time</th>
                <th scope="col">Participants</th>
                <th scope="col">Options</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entry in searchedMeetups
  .Select(m => new { Meetup = m, Time = m.OptionsFrom })
  .OrderBy(m => m.Time))
            {
                <tr class="@IsActiveRow(entry.Meetup)">
                    <th @onclick="e => NavigateToMeetup(entry.Meetup)" scope="row">@entry.Meetup.Name</th>
                    <td @onclick="e => NavigateToMeetup(entry.Meetup)">@entry.Time</td>
                    <td @onclick="e => NavigateToMeetup(entry.Meetup)">@UserService.GetById(entry.Meetup.OwnerId).Result.UserName</td>
                    <td @onclick="e => NavigateToMeetup(entry.Meetup)">@MeetupService.GetInvitedUsers(entry.Meetup.Id).Result.Count</td>
                    <td @onclick="e => NavigateToMeetup(entry.Meetup)">@MeetupService.GetOptions(entry.Meetup.Id).Result.Count</td>
                    <td>
                        <AuthorizeView Policy="MeetupOwner">
                            <Authorized>
                                 <a href="/meetings/@entry.Meetup.Id/edit">
                                     <input type="button" class="btn btn-primary" value="Edit"/>
                                 </a>
                            </Authorized>
                        </AuthorizeView>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private UserDTO signedUser;
    
    private IEnumerable<MeetupDTO> myMeetups = new List<MeetupDTO>();

    private string searchString;

    private IEnumerable<MeetupDTO> searchedMeetups = new List<MeetupDTO>();

    private (bool, string) popup;
    
    protected override async Task OnParametersSetAsync()
    {
        signedUser = UserService.GetByName((await authenticationStateTask).User.Identity?.Name);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            myMeetups = (await UserService.GetInvitedMeetups(signedUser!.Id)).Select(um => MeetupService.GetById(um.MeetupId)).OfType<MeetupDTO>();
            searchedMeetups = myMeetups;
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private void SearchMeetups()
    {
        searchedMeetups = myMeetups.Where(m => m.Name.Contains(searchString));

        StateHasChanged();
    }

    private void NavigateToMeetup(MeetupDTO meetup)
    {
        NavigationManager.NavigateTo($"/meetings/{meetup.Id}/view");
    }


    private async Task<string> IsActiveRow(MeetupDTO meetup)
    {
        return await WhenAndWhereFacade.IsAnyOptionVoted(signedUser!.Id, meetup.Id) switch
        {
            true => "table-secondary",
            _ => "table-light"
        };
    }
}
