@page "/meeting-create"

@using WhenAndWhere.BL.Services;
@using WhenAndWhere.BL.DTOs;

@inject MeetupService MeetupService
@inject UserService UserService
@inject UserMeetupService UserMeetupService
@inject NavigationManager NavigationManager

<StyledRow Inner="false">
    <h1>Create</h1>

    <h4>Meeting</h4>
</StyledRow>

<hr />

<StyledRow Inner="true">
    <ValidationPopup IsActive="dataPopup.Item1" ErrorMessage="@dataPopup.Item2" OnClose="() => dataPopup = (false, null)" />

    <EditForm Model="meetup" OnSubmit="CreateMeetup">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label class="control-label">Title:</label>
            <InputText class="form-control" @bind-Value="meetup.Name" placeholder="title" />
            <ValidationMessage For="() => meetup.Name" />
        </div>

        <input type="submit" class="form-control col-3 my-2 btn btn-secondary" value="Create" />
        <input type="reset" class="form-control col-3 my-2 btn btn-secondary" value="Clear" />
    </EditForm>
</StyledRow>

<hr />

@code {
    private MeetupDTO meetup;

    private (bool, string) dataPopup;
    private Action<string> showPopup;

    protected override void OnInitialized()
    {
        showPopup = err => dataPopup = (true, err);
        meetup = new MeetupDTO();
        base.OnInitialized();
    }

    private async Task CreateMeetup()
    {
        meetup.OwnerId = UserService.CurrentUser;
        UserMeetupDTO userMeetup = new UserMeetupDTO { UserId = CurrentUser.Id, MeetupId = meetup.Id };
        
        UserMeetupService.Create(userMeetup);
        MeetupService.Create(meetup);
            
        //meeting.Participants = new List<ApplicationUser> { UserService.CurrentUser };    
        

        if (!await IsSuccess(MeetingService.AddMeetingAsync(meeting), showPopup))
        {
            return;
        }

        NavigationManager.NavigateTo($"/meetings/{meeting.Id}/view");
    }
}
