// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WhenAndWhereDAL.Data;

#nullable disable

namespace WhenAndWhereDAL.Migrations
{
    [DbContext(typeof(WhenAndWhereDBContext))]
    [Migration("20221002211227_BasicDataSeeded")]
    partial class BasicDataSeeded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

            modelBuilder.Entity("WhenAndWhereDAL.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OptionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("WhenAndWhereDAL.Models.Meetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Logo")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OptionsFrom")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OptionsTo")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Meetup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Logo = new byte[] { 0 },
                            Name = "Bowling",
                            OptionsFrom = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OptionsTo = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OwnerId = 1,
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Logo = new byte[] { 0 },
                            Name = "Snem Tvrdosinskych Alkoholikov",
                            OptionsFrom = new DateTime(2022, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OptionsTo = new DateTime(2022, 11, 11, 23, 59, 59, 0, DateTimeKind.Unspecified),
                            OwnerId = 150,
                            Type = 1
                        });
                });

            modelBuilder.Entity("WhenAndWhereDAL.Models.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MeetupId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("MeetupId");

                    b.HasIndex("UserId");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("WhenAndWhereDAL.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MeetupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleName")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MeetupId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("WhenAndWhereDAL.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Avatar")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Avatar = new byte[] { 171, 205, 239 },
                            Email = "palenka@kde.je",
                            Name = "Jozef",
                            PhoneNumber = "+421123456789",
                            Surname = "Kovalcik"
                        },
                        new
                        {
                            Id = 150,
                            Avatar = new byte[] { 254, 220, 186 },
                            Email = "raz@vyrastiem.dufam",
                            Name = "Matus",
                            PhoneNumber = "+421987654321",
                            Surname = "Valkovic"
                        });
                });

            modelBuilder.Entity("WhenAndWhereDAL.Models.UserMeetup", b =>
                {
                    b.Property<int>("MeetupId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateInvited")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("MeetupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMeetup");

                    b.HasData(
                        new
                        {
                            MeetupId = 2,
                            UserId = 1,
                            DateInvited = new DateTime(2022, 11, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            State = 0
                        },
                        new
                        {
                            MeetupId = 2,
                            UserId = 150,
                            DateInvited = new DateTime(2022, 11, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            State = 0
                        });
                });

            modelBuilder.Entity("WhenAndWhereDAL.Models.UserOption", b =>
                {
                    b.Property<int>("OptionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeVoted")
                        .HasColumnType("TEXT");

                    b.HasKey("OptionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOption");
                });

            modelBuilder.Entity("WhenAndWhereDAL.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("WhenAndWhereDAL.Models.Address", b =>
                {
                    b.HasOne("WhenAndWhereDAL.Models.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");
                });

            modelBuilder.Entity("WhenAndWhereDAL.Models.Meetup", b =>
                {
                    b.HasOne("WhenAndWhereDAL.Models.User", "Owner")
                        .WithMany("OwnedMeetups")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("WhenAndWhereDAL.Models.Option", b =>
                {
                    b.HasOne("WhenAndWhereDAL.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WhenAndWhereDAL.Models.Meetup", "Meetup")
                        .WithMany("Options")
                        .HasForeignKey("MeetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WhenAndWhereDAL.Models.User", "User")
                        .WithMany("CreatedOptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Meetup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WhenAndWhereDAL.Models.Role", b =>
                {
                    b.HasOne("WhenAndWhereDAL.Models.Meetup", null)
                        .WithMany("Roles")
                        .HasForeignKey("MeetupId");
                });

            modelBuilder.Entity("WhenAndWhereDAL.Models.UserMeetup", b =>
                {
                    b.HasOne("WhenAndWhereDAL.Models.Meetup", "Meetup")
                        .WithMany("JoinedUsers")
                        .HasForeignKey("MeetupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WhenAndWhereDAL.Models.User", "User")
                        .WithMany("JoinedMeetups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meetup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WhenAndWhereDAL.Models.UserOption", b =>
                {
                    b.HasOne("WhenAndWhereDAL.Models.Option", "Option")
                        .WithMany("UserOptions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WhenAndWhereDAL.Models.User", "User")
                        .WithMany("VotedOptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WhenAndWhereDAL.Models.UserRole", b =>
                {
                    b.HasOne("WhenAndWhereDAL.Models.Role", "Role")
                        .WithMany("AssignedUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WhenAndWhereDAL.Models.User", "User")
                        .WithMany("AssignedRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WhenAndWhereDAL.Models.Meetup", b =>
                {
                    b.Navigation("JoinedUsers");

                    b.Navigation("Options");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("WhenAndWhereDAL.Models.Option", b =>
                {
                    b.Navigation("UserOptions");
                });

            modelBuilder.Entity("WhenAndWhereDAL.Models.Role", b =>
                {
                    b.Navigation("AssignedUsers");
                });

            modelBuilder.Entity("WhenAndWhereDAL.Models.User", b =>
                {
                    b.Navigation("AssignedRoles");

                    b.Navigation("CreatedOptions");

                    b.Navigation("JoinedMeetups");

                    b.Navigation("OwnedMeetups");

                    b.Navigation("VotedOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
